generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Si tengo el modelo en mi código y quiero que se cree la tabla 
//npx prisma migrate dev
model Todo {
  id          String   @id @default(uuid())
  description String
  complete    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updateAt    DateTime @updatedAt
  userId      String

  user        User @relation(fields: [userId], references: [id])
}

// Si ya tengo una tabla y quiero que se actualice en mi código
// npx prisma db pull
// npx prisma generate -> para que se cree el cliente y pode utilizar la tabla 
//Si después añado algún campo aquí en código y quiero que se refleje en la db
// npx prisma db push
model Employee {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar
  lastName      String   @db.VarChar
  isAdmin   Boolean  @default(true)
  createdAt DateTime @default(now()) @db.Timestamp(6)
  roles String[] @default([])
}

//Auth .js
model Account {
  id                 String  @id @default(uuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}
 
model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@map("sessions")
}
 
model User {
  id            String    @id @default(uuid())
  name          String?
  password      String?
  roles         String[] @default(["user"])
  isActive      Boolean @default(true)
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  todos         Todo[]
 
  @@map("users")
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
  @@map("verificationtokens")
}
